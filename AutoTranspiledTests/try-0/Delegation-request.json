{"model":"text-davinci-003","prompt":"# Convert this from Swift to C++\n# Swift version\n@main\nstruct MyMain {\n\n    static func main() {\n        let tracker = DiceGameTracker()\n        let game = SnakesAndLadders()\n        game.delegate = tracker\n        game.play()\n    }\n\n}\n\nclass DiceGameTracker: DiceGameDelegate {\n    var numberOfTurns = 0\n    func gameDidStart(_ game: DiceGame) {\n        numberOfTurns = 0\n        if game is SnakesAndLadders {\n            print(\"Started a new game of Snakes and Ladders\")\n        }\n        print(\"The game is using a \\(game.dice.sides)-sided dice\")\n    }\n    func game(_ game: DiceGame, didStartNewTurnWithDiceRoll diceRoll: Int) {\n        numberOfTurns += 1\n        print(\"Rolled a \\(diceRoll)\")\n    }\n    func gameDidEnd(_ game: DiceGame) {\n        print(\"The game lasted for \\(numberOfTurns) turns\")\n    }\n}\n\nclass SnakesAndLadders: DiceGame {\n    let finalSquare = 25\n    let dice = Dice(sides: 6, generator: LinearCongruentialGenerator())\n    var square = 0\n    var board: [Int]\n    init() {\n        board = Array(repeating: 0, count: finalSquare + 1)\n        board[03] = +08\n        board[06] = +11\n        board[09] = +09\n        board[10] = +02\n        board[14] = -10\n        board[19] = -11\n        board[22] = -02\n        board[24] = -08\n    }\n    weak var delegate: DiceGameDelegate?\n    func play() {\n        square = 0\n        delegate?.gameDidStart(self)\n        gameLoop: while square != finalSquare {\n            let diceRoll = dice.roll()\n            delegate?.game(self, didStartNewTurnWithDiceRoll: diceRoll)\n            switch square + diceRoll {\n            case finalSquare:\n                break gameLoop\n            case let newSquare where newSquare > finalSquare:\n                continue gameLoop\n            default:\n                square += diceRoll\n                square += board[square]\n            }\n        }\n        delegate?.gameDidEnd(self)\n    }\n}\nclass Dice {\n    let sides: Int\n    let generator: RandomNumberGenerator\n    init(sides: Int, generator: RandomNumberGenerator) {\n        self.sides = sides\n        self.generator = generator\n    }\n    func roll() -> Int {\n        return Int(generator.random() * Double(sides)) + 1\n    }\n}\n\nprotocol DiceGame {\n    var dice: Dice { get }\n    func play()\n}\n\nprotocol DiceGameDelegate: AnyObject {\n    func gameDidStart(_ game: DiceGame)\n    func game(_ game: DiceGame, didStartNewTurnWithDiceRoll diceRoll: Int)\n    func gameDidEnd(_ game: DiceGame)\n}\n\nclass LinearCongruentialGenerator: RandomNumberGenerator {\n    var lastRandom = 42.0\n    let m = 139968.0\n    let a = 3877.0\n    let c = 29573.0\n    func random() -> Double {\n        lastRandom =\n            ((lastRandom * a + c)\n                .truncatingRemainder(dividingBy: m))\n        return lastRandom / m\n    }\n}\n\nprotocol RandomNumberGenerator {\n    func random() -> Double\n}\n# End\n # C++ version","max_tokens":2048,"frequency_penalty":0,"presence_penalty":0,"stop":["###"]}