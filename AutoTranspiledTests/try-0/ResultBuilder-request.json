{"model":"text-davinci-003","prompt":"# Convert this from Swift to C++\n# Swift version\n@main\nstruct MyMain {\n\n    static func main() {\n        let genericGreeting = makeGreeting()\n        print(genericGreeting.draw())\n        // Prints \"***Hello WORLD!**\"\n\n        let personalGreeting = makeGreeting(for: \"Ravi Patel\")\n        print(personalGreeting.draw())\n        // Prints \"***Hello RAVI PATEL!**\"\n    }\n}\n\n@resultBuilder\nstruct DrawingBuilder {\n    static func buildBlock(_ components: Drawable...) -> Drawable {\n        return Line(elements: components)\n    }\n    static func buildEither(first: Drawable) -> Drawable {\n        return first\n    }\n    static func buildEither(second: Drawable) -> Drawable {\n        return second\n    }\n}\n\nfunc draw(@DrawingBuilder content: () -> Drawable) -> Drawable {\n    return content()\n}\nfunc caps(@DrawingBuilder content: () -> Drawable) -> Drawable {\n    return AllCaps(content: content())\n}\n\nfunc makeGreeting(for name: String? = nil) -> Drawable {\n    let greeting = draw {\n        Stars(length: 3)\n        Text(\"Hello\")\n        Space()\n        caps {\n            if let name = name {\n                Text(name + \"!\")\n            } else {\n                Text(\"World!\")\n            }\n        }\n        Stars(length: 2)\n    }\n    return greeting\n}\n\nprotocol Drawable {\n    func draw() -> String\n}\nstruct Line: Drawable {\n    var elements: [Drawable]\n    func draw() -> String {\n        return elements.map { $0.draw() }.joined(separator: \"\")\n    }\n}\nstruct Text: Drawable {\n    var content: String\n    init(_ content: String) { self.content = content }\n    func draw() -> String { return content }\n}\nstruct Space: Drawable {\n    func draw() -> String { return \" \" }\n}\nstruct Stars: Drawable {\n    var length: Int\n    func draw() -> String { return String(repeating: \"*\", count: length) }\n}\nstruct AllCaps: Drawable {\n    var content: Drawable\n    func draw() -> String { return content.draw().uppercased() }\n}\n# End\n # C++ version","max_tokens":2048,"frequency_penalty":0,"presence_penalty":0,"stop":["###"]}