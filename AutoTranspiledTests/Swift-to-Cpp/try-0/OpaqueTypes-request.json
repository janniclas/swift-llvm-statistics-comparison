{"model":"text-davinci-003","prompt":"# Convert this from Swift to C++\n# Swift version\n@main\nstruct MyMain {\n    static func main() {\n        let trapezoid = makeTrapezoid()\n        print(trapezoid.draw())\n    }\n}\n\nprotocol Shape {\n    func draw() -> String\n}\n\nstruct Square: Shape {\n    var size: Int\n    func draw() -> String {\n        let line = String(repeating: \"*\", count: size)\n        let result = [String](repeating: line, count: size)\n        return result.joined(separator: \"\\n\")\n    }\n}\n\nstruct Triangle: Shape {\n    var size: Int\n    func draw() -> String {\n        var result: [String] = []\n        for length in 1...size {\n            result.append(String(repeating: \"*\", count: length))\n        }\n        return result.joined(separator: \"\\n\")\n    }\n}\n\nstruct FlippedShape<T: Shape>: Shape {\n    var shape: T\n    func draw() -> String {\n        let lines = shape.draw().split(separator: \"\\n\")\n        return lines.reversed().joined(separator: \"\\n\")\n    }\n}\n\nstruct JoinedShape<T: Shape, U: Shape>: Shape {\n    var top: T\n    var bottom: U\n    func draw() -> String {\n        return top.draw() + \"\\n\" + bottom.draw()\n    }\n}\n\nfunc makeTrapezoid() -> some Shape {\n    let top = Triangle(size: 2)\n    let middle = Square(size: 2)\n    let bottom = FlippedShape(shape: top)\n    let trapezoid = JoinedShape(\n        top: top,\n        bottom: JoinedShape(top: middle, bottom: bottom)\n    )\n    return trapezoid\n}\n# End\n # C++ version","max_tokens":2048,"frequency_penalty":0,"presence_penalty":0,"stop":["###"]}