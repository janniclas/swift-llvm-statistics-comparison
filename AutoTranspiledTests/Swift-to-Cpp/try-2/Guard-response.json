{"id":"cmpl-6hEfYqtTdR50iZXCl356EBQyIgfLK","object":"text_completion","created":1675762512,"model":"text-davinci-003","choices":[{"text":"\n#include <iostream>\n#include <string>\n#include <map>\n\nusing namespace std;\n\nmap<string, string> favoriteSnacks = {\n  {\"Alice\", \"Chips\"},\n  {\"Bob\", \"Licorice\"},\n  {\"Eve\", \"Pretzels\"}\n};\n\nstruct Item\n{\n    int price;\n    int count;\n};\nenum class VendingMachineError\n{\n    invalidSelection,\n    insufficientFunds,\n    outOfStock\n};\nclass VendingMachine\n{\npublic:\n    map<string, Item> inventory =\n        {{\"Candy Bar\",Item{12, 7}},\n         {\"Chips\",Item{10, 4}},\n         {\"Pretzels\",Item{7, 11}}\n        };\n    int coinsDeposited = 0;\n\n    void vend(string name) throw (VendingMachineError)\n    {\n        auto item = inventory.find(name);\n        if(item == inventory.end())\n        {\n            throw VendingMachineError::invalidSelection;\n        }\n        if(item->second.count == 0)\n        {\n            throw VendingMachineError::outOfStock;\n        }\n        if(item->second.price > coinsDeposited)\n        {\n            throw VendingMachineError::insufficientFunds;\n        }\n        coinsDeposited -= item->second.price;\n\n        Item newItem = item->second;\n        newItem.count--;\n        inventory[name] = newItem;\n\n        cout << \"Dispensing \" << name << endl;\n    }\n};\n\nvoid buyFavoriteSnack(string person, VendingMachine &vendingMachine)\n{\n    string snackName = favoriteSnacks[person];\n    if(snackName.empty()){\n        snackName = \"Candy Bar\";\n    }\n    try {\n        vendingMachine.vend(snackName);\n        cout << \"Success! Yum.\" << endl;\n    } catch (VendingMachineError error) {\n        switch (error)\n        {\n        case VendingMachineError::invalidSelection:\n            cout << \"Invalid Selection.\" << endl;\n            break;\n         case VendingMachineError::outOfStock:\n            cout << \"Out of Stock.\" << endl;\n            break;\n        case VendingMachineError::insufficientFunds:\n            cout << \"Insufficient funds. Please insert an additional coins.\" << endl;\n            break;\n        }\n    }\n}\n\nint main()\n{\n    VendingMachine vm;\n    vm.coinsDeposited = 8;\n    buyFavoriteSnack(\"Alice\", vm);\n}","index":0,"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":586,"completion_tokens":624,"total_tokens":1210}}