{"id":"cmpl-6hFiSzArAvaU814G8mWABP5icdtO3","object":"text_completion","created":1675766536,"model":"text-davinci-003","choices":[{"text":"\nclass MyMain {\npublic:\n    static void main() {\n        DiceGameTracker tracker = DiceGameTracker();\n        SnakesAndLadders game = SnakesAndLadders();\n        game.delegate = tracker;\n        game.play();\n    }\n};\n\nclass DiceGameTracker : public DiceGameDelegate {\npublic:\n    int numberOfTurns = 0;\n\n    void gameDidStart(DiceGame game) override {\n        numberOfTurns = 0;\n        if (dynamic_cast<SnakesAndLadders>(game) != nullptr) {\n            cout << \"Started a new game of Snakes and Ladders\" << endl;\n        }\n        cout << \"The game is using a \" << game.dice.sides << \"-sided dice\" << endl;\n    }\n\n    void game(DiceGame game, int diceRoll) override {\n        numberOfTurns += 1;\n        cout << \"Rolled a \" << diceRoll << endl;\n    }\n\n    void gameDidEnd(DiceGame game) override {\n        cout << \"The game lasted for \" << numberOfTurns << \" turns\" << endl;\n    }\n};\n\nclass SnakesAndLadders : public DiceGame {\npublic:\n    int finalSquare = 25;\n    Dice dice = Dice(sides: 6, generator: LinearCongruentialGenerator());\n    int square = 0;\n    vector<int> board;\n\n    SnakesAndLadders() { \n        board = vector<int>(finalSquare + 1, 0);\n        board[03] = +08;\n        board[06] = +11;\n        board[09] = +09;\n        board[10] = +02;\n        board[14] = -10;\n        board[19] = -11;\n        board[22] = -02;\n        board[24] = -08;\n    }\n\n    DiceGameDelegate *delegate; \n\n    void play() {\n        square = 0;\n        delegate->gameDidStart(this);\n        while (square != finalSquare) {\n            int diceRoll = dice.roll();\n            delegate->game(this, diceRoll);\n            switch (square + diceRoll) {\n            case finalSquare:\n                break;\n            case int newSquare :\n                if (newSquare > finalSquare) {\n                    continue;\n                }\n                square += diceRoll;\n                square += board[square];\n                break;\n            }\n        }\n        delegate->gameDidEnd(this);\n    }\n};\n\nclass Dice {\npublic:\n    int sides;\n    RandomNumberGenerator generator;\n\n    Dice(sides, generator) {\n        this.sides = sides;\n        this.generator = generator;\n    }\n\n    int roll() {\n        return int(generator.random() * double(sides)) + 1;\n    }\n};\n\nclass LinearCongruentialGenerator : public RandomNumberGenerator {\npublic:\n    double lastRandom = 42.0;\n    double m = 139968.0;\n    double a = 3877.0;\n    double c = 29573.0;\n\n    double random() override {\n        lastRandom = ((lastRandom * a + c)\n            .truncatingRemainder(dividingBy: m));\n        return lastRandom / m;\n    }\n};\n\nclass DiceGame {\npublic:\n    virtual Dice dice;\n    virtual void play();\n};\n\nclass DiceGameDelegate {\npublic:\n    virtual void gameDidStart(DiceGame game);\n    virtual void game(DiceGame game, int diceRoll);\n    virtual void gameDidEnd(DiceGame game);\n};","index":0,"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":849,"completion_tokens":859,"total_tokens":1708}}