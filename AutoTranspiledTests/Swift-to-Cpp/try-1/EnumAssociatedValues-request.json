{"model":"text-davinci-003","prompt":"# Convert this from Swift to C++\n# Swift version\n// You can define Swift enumerations to store associated\n// values of any given type, and the value types can be\n// different for each case of the enumeration if needed.\n// Enumerations similar to these are known as discriminated\n// unions, tagged unions, or variants in other programming languages.\n\nenum Barcode {  //TODO: std::variants + tuples\n    case upc(Int, Int, Int, Int)\n    case qrCode(String)\n}\n@main\nstruct MyMain {\n\n    static func main() {\n\n        var productBarcode = Barcode.upc(8, 85909, 51226, 3)\n        let first = strangeSum(productBarcode)\n        productBarcode = .qrCode(\"ABCDEFGHIJKLMNOP\")\n        let second = strangeSum(productBarcode)\n    }\n\n    static func strangeSum(_ code: Barcode) -> Int {\n        var x = 0\n        switch code {\n        case .upc(let numberSystem, let manufacturer, let product, let check):\n            x = numberSystem + manufacturer + product + check\n        case .qrCode(let productCode):\n            x = -1\n        }\n        return x\n    }\n}\n# End\n # C++ version","max_tokens":2048,"frequency_penalty":0,"presence_penalty":0,"stop":["###"]}