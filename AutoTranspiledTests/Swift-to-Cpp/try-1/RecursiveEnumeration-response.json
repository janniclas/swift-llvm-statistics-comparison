{"id":"cmpl-6hEjPDJkMJfKI6hhFQGqHWlq2aXWU","object":"text_completion","created":1675762751,"model":"text-davinci-003","choices":[{"text":"\n // A recursive enumeration is an enumeration that has another\n // instance of the enumeration as the associated value for\n // one or more of the enumeration cases. You indicate that an\n // enumeration case is recursive by writing indirect before it,\n // which tells the compiler to insert the necessary layer of indirection.\n\nenum ArithmeticExpression {\n    number,\n    indirect addition,\n    indirect multiplication,\n};\n\nint main() {\n   ArithmeticExpression five = ArithmeticExpression::number;\n   ArithmeticExpression four = ArithmeticExpression::number;\n   ArithmeticExpression sum = ArithmeticExpression::addition;\n   ArithmeticExpression product = ArithmeticExpression::multiplication;\n\n   int result = evaluate(product);\n   return 0;\n}\n\nint evaluate(ArithmeticExpression expression) {\n    switch (expression) {\n        case ArithmeticExpression::number:\n            return value;\n        case ArithmeticExpression::addition:\n            return evaluate(left) + evaluate(right);\n        case ArithmeticExpression::multiplication:\n            return evaluate(left) * evaluate(right);\n        default:\n            return -1;\n    }\n}","index":0,"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":321,"completion_tokens":271,"total_tokens":592}}