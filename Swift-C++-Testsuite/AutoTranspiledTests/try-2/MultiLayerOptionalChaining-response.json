{"id":"cmpl-6hFMKhmvxHpoj6pFfQ3r7vWg3Prp0","object":"text_completion","created":1675765164,"model":"text-davinci-003","choices":[{"text":" \n\n#include <iostream> \n#include <string> \nusing namespace std; \n\nclass Person \n{ \npublic:\n  Residence* residence;\n};\n\nclass Residence\n{ \npublic:\n  int numberOfRooms; \n  Room* rooms = new Room[10]; \n  Address* address; \n\n  int getNumberOfRooms() \n  { \n    return numberOfRooms;\n  } \n  void setNumberOfRooms(int numOfRooms) \n  { \n    this->numberOfRooms = numOfRooms;\n  }\n  Room getIRoomAtIndex(int index)\n  { \n    return rooms[index]; \n  } \n  void setRoomAtIndex(Room room, int index)\n  { \n    this->rooms[index] = room;\n  }\n  void printNumberOfRooms() \n  { \n    cout << \"The number of rooms is \" << this->numberOfRooms << endl;\n  } \n}; \n\nclass Room\n{ \npublic:\n  string name; \n  Room(string name) \n  { \n   this->name = name; \n  }\n};\n\nclass Address \n{ \npublic:\n  string buildingName; \n  string buildingNumber;\n  string street;\n  string buildingIdentifier()\n  { \n    if ((buildingNumber != \"\") && (street != \"\"))\n    { \n      return buildingNumber + \" \" + street; \n    } \n    else if (buildingName != \"\") \n    { \n      return buildingName; \n    } \n    else\n    {\n     return \"None\"; \n    } \n  }\n};\n\nAddress createAddress() \n{ \n  cout << \"Function was called.\" << endl;\n  Address* someAddress = new Address();\n  someAddress->buildingNumber = \"29\";\n  someAddress->street = \"Acacia Road\";\n  return *someAddress;\n} \n\nint main() { \n  Person* john = new Person();\n  if (john->residence->numberOfRooms != 0) \n  { \n    cout << \"John's residence has \" << john->residence->numberOfRooms << \" room(s).\" << endl; \n  }\n  else \n  {\n    cout << \"Unable to retrieve the number of rooms.\" << endl; \n  }\n\n  Address someAddress; \n  someAddress.buildingNumber = \"29\"; \n  someAddress.street = \"Acacia Road\"; \n  john->residence->address = &someAddress; \n  john->residence->address = &createAddress();\n\n  if (john->residence->printNumberOfRooms() != NULL)\n  { \n    cout << \"It was possible to print the number of rooms.\" << endl; \n  } \n  else\n  { \n    cout << \"It was not possible to print the number of rooms.\" << endl; \n  }\n\n  if ((john->residence->address = &someAddress) != NULL) \n  { \n    cout << \"It was possible to set the address.\" << endl; \n  } \n  else \n  { \n    cout << \"It was not possible to set the address.\" << endl; \n  }\n\n  if ((john->residence->getIRoomAtIndex(0).name) != \"\") \n  { \n    cout << \"The first room name is \" << john->residence->getIRoomAtIndex(0).name << \".\" << endl; \n  } \n  else \n  { \n    cout << \"Unable to retrieve the first room name.\" << endl; \n  }\n\n  john->residence->setRoomAtIndex(Room(\"Bathroom\"), 0);\n\n  Residence johnsHouse; \n  johnsHouse.setNumberOfRooms(2);\n  johnsHouse.setRoomAtIndex(Room(\"Living Room\"), 0);\n  johnsHouse.setRoomAtIndex(Room(\"Kitchen\"), 1);\n  john->residence = &johnsHouse;\n\n  if ((john->residence->getIRoomAtIndex(0).name) != \"\")\n  { \n    cout << \"The first room name is \" << john->residence->getIRoomAtIndex(0).name << \".\" << endl; \n  } \n  else\n  {\n    cout << \"Unable to retrieve the first room name.\" << endl;\n  }\n\n  Address johnsAddress; \n  johnsAddress.buildingName = \"The Larches\";\n  johnsAddress.street = \"Laurel Street\";\n  john->residence->address = &johnsAddress; \n\n  if ((john->residence->address->street) != \"\") \n  { \n    cout << \"John's street name is \" << john->residence->address->street << \".\" << endl; \n  } \n  else \n  { \n    cout << \"Unable to retrieve the address.\" << endl; \n  }\n\n  string buildingIdentifier = john->residence->address->buildingIdentifier(); \n  if (buildingIdentifier.find(\"The\") != string::npos) \n  { \n    cout << \"John's building identifier begins with \\\"The\\\".\" << endl;\n  } \n  else \n  { \n    cout << \"John's building identifier doesn't begin with \\\"The\\\".\" << endl; \n  } \n\n  return 0; \n}","index":0,"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":986,"completion_tokens":1307,"total_tokens":2293}}