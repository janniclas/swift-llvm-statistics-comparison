{"id":"cmpl-6hFhwGocfmhbTF74LCLfQNTinCAQn","object":"text_completion","created":1675766504,"model":"text-davinci-003","choices":[{"text":" \n\n#include <iostream> \n\nclass DiceGameTracker : public DiceGameDelegate { \n    \n    int numberOfTurns = 0; \n    \n    void gameDidStart(DiceGame* game) override { \n        numberOfTurns = 0; \n        if (dynamic_cast<SnakesAndLadders*>(game)) \n            std::cout << \"Started a new game of Snakes and Ladders\" << std::endl; \n        std::cout << \"The game is using a \" << game->dice.sides << \"-sided dice\" << std::endl; \n    } \n    void game(DiceGame* game, int diceRoll) override { \n        numberOfTurns ++; \n        std::cout << \"Rolled a \" << diceRoll << std::endl;  \n    } \n    void gameDidEnd(DiceGame* game) override { \n        std::cout << \"The game lasted for \" << numberOfTurns  << \" turns\" << std::endl; \n    } \n}; \n\nclass SnakesAndLadders : public DiceGame { \n    \n    int finalSquare = 25;\n    Dice dice = {6, new LinearCongruentialGenerator()}; \n    int square = 0; \n    int board[26] {0}; \n\n    SnakesAndLadders() {\n        board[3] = 8;\n        board[6] = 11;\n        board[9] = 9;\n        board[10] = 2;\n        board[14] = -10;\n        board[19] = -11;\n        board[22] = -2;\n        board[24] = -8;\n    }\n    \n    DiceGameDelegate* delegate = new DiceGameTracker(); \n    \n    void play() override { \n        square = 0;\n        delegate->gameDidStart(this); \n        while (square != finalSquare) { \n            int diceRoll = dice.roll(); \n            delegate->game(this, diceRoll); \n            if (square + diceRoll == finalSquare)\n                break; \n            else if (square + diceRoll > finalSquare)\n                continue;  \n            else {\n                square += diceRoll;\n                square += board[square];\n            }\n        }\n        delegate->gameDidEnd(this);\n    }  \n};\n\nstruct MyMain {\n\n    static void main() {\n        DiceGameTracker* tracker = new DiceGameTracker(); \n        SnakesAndLadders* game = new SnakesAndLadders(); \n        game->delegate = tracker; \n        game->play(); \n    }\n\n};\n\nint main() {\n   MyMain::main(); \n   return 0;\n}","index":0,"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":849,"completion_tokens":648,"total_tokens":1497}}