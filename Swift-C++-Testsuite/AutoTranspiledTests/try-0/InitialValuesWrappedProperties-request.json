{"model":"text-davinci-003","prompt":"# Convert this from Swift to C++\n# Swift version\n// When you apply a wrapper to a property, the compiler synthesizes code\n// that provides storage for the wrapper and code that provides access\n// to the property through the wrapper. (The property wrapper is responsible\n// for storing the wrapped value, so there’s no synthesized code for that.)\n// You could write code that uses the behavior of a property wrapper, without\n// taking advantage of the special attribute syntax. For example, here’s a version\n// of SmallRectangle from the previous code listing that wraps its properties in the\n// TwelveOrLess structure explicitly, instead of writing @TwelveOrLess as an attribute:\n//\n//struct SmallRectangle {\n//    private var _height = TwelveOrLess()\n//    private var _width = TwelveOrLess()\n//    var height: Int {\n//        get { return _height.wrappedValue }\n//        set { _height.wrappedValue = newValue }\n//    }\n//    var width: Int {\n//        get { return _width.wrappedValue }\n//        set { _width.wrappedValue = newValue }\n//    }\n//}\n\n@main\nstruct MyMain {\n\n    static func main() {\n        var rectangle = ZeroRectangle()\n        var unitRectangle = UnitRectangle()\n        var mixedRectangle = MixedRectangle()\n        mixedRectangle.width = 12\n    }\n}\n@propertyWrapper\nstruct SmallNumber {\n    private var maximum: Int\n    private var number: Int\n\n    var wrappedValue: Int {\n        get { return number }\n        set { number = min(newValue, maximum) }\n    }\n\n    init() {\n        maximum = 12\n        number = 0\n    }\n    init(wrappedValue: Int) {\n        maximum = 12\n        number = min(wrappedValue, maximum)\n    }\n    init(wrappedValue: Int, maximum: Int) {\n        self.maximum = maximum\n        number = min(wrappedValue, maximum)\n    }\n}\n\nstruct ZeroRectangle {\n    @SmallNumber var height: Int\n    @SmallNumber var width: Int\n}\n\nstruct UnitRectangle {\n    @SmallNumber var height: Int = 1\n    @SmallNumber var width: Int = 1\n}\n\nstruct MixedRectangle {\n    @SmallNumber var height: Int = 1\n    @SmallNumber(maximum: 9) var width: Int = 2\n}\n# End\n # C++ version","max_tokens":2048,"frequency_penalty":0,"presence_penalty":0,"stop":["###"]}