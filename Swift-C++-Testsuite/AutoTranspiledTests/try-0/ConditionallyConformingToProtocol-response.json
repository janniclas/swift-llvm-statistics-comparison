{"id":"cmpl-6hFdbVAy6OfN6IK3EDtTbdHTjBvNN","object":"text_completion","created":1675766235,"model":"text-davinci-003","choices":[{"text":"\n #include <iostream>\n #include <string>\n #include <vector>\n #include <math.h>\n \n class Dice {\n\t int sides;\n\t RandomNumberGenerator *generator;\n public:\n\t Dice(int sides, RandomNumberGenerator *generator) : sides(sides), generator(generator) {\n \n\t }\n\t int roll() {\n\t\t return int(generator->random() * sides) + 1;\n\t }\n\t virtual std::string textualDescription() {\n\t\t return \"A \" + std::to_string(sides) + \"-sided dice\";\n\t }\n };\n \n class LinearCongruentialGenerator : public RandomNumberGenerator {\n\t double lastRandom = 42.0;\n\t double m = 139968.0;\n\t double a = 3877.0;\n\t double c = 29573.0;\n public:\n\t double random() {\n\t\t lastRandom = fmod((lastRandom * a + c), m);\n\t\t return lastRandom / m;\n\t }\n };\n \n template<typename T>\n class TextRepresentable {\n public:\n\t virtual std::string textualDescription() = 0;\n };\n \n template<typename T>\n class Vector : public TextRepresentable<T> {\n\t std::vector<T> myDice;\n public:\n\t Vector(std::vector<T> myDice) : myDice(myDice) {\n \n\t }\n\t std::string textualDescription() {\n\t\t std::string res = \"[\";\n\t\t for (int i = 0; i < myDice.size(); i++) {\n\t\t\t res += myDice[i].textualDescription();\n\t\t\t if (i != myDice.size() - 1) {\n\t\t\t\t res += \", \";\n\t\t\t }\n\t\t }\n\t\t res += \"]\";\n\t\t return res;\n\t }\n };\n \n int main() {\n\t LinearCongruentialGenerator *src = new LinearCongruentialGenerator();\n\t Dice *d12 = new Dice(12, src);\n\t Dice *d6 = new Dice(6, src);\n\t std::vector<Dice*> myDice = { d6, d12 };\n\t Vector<Dice*> vec(myDice);\n\t std::cout << vec.textualDescription();\n\t delete src;\n\t delete d12;\n\t delete d6;\n }","index":0,"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":439,"completion_tokens":578,"total_tokens":1017}}