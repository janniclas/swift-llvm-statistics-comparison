{"id":"cmpl-6hErQKfrrgvb66bF6Bh2DESRkdgso","object":"text_completion","created":1675763248,"model":"text-davinci-003","choices":[{"text":"\n\n#include <iostream>\n#include <string>\n#include <algorithm>\n\nclass Shape\n{\npublic:\n    virtual std::string draw() = 0;\n};\n\nclass Square : public Shape\n{\nprivate:\n    int size;\n\npublic:\n    Square(int size) : size(size) {};\n\n    std::string draw() {\n        std::string line = std::string(size, '*');\n        std::string result = line;\n        for (int i = 1; i < size; i++) result += ('\\n' + line); \n        return result;\n    }\n};\n\nclass Triangle : public Shape\n{\nprivate:\n    int size;\n\npublic:\n    Triangle(int size) : size(size) {};\n\n    std::string draw() {\n        std::string result;\n        for (int i = 1; i <= size; i++) {\n            result += std::string(i, '*');\n            if (i < size) result += '\\n';\n        } \n        return result;\n    }\n};\n\ntemplate <typename T>\nclass FlippedShape : public Shape\n{\nprivate:\n    T shape;\n\npublic:\n    FlippedShape(T shape) : shape(shape) {};\n\n    std::string draw() {\n        std::string lines = shape.draw();\n        std::reverse(lines.begin(), lines.end());\n        return lines;\n    }\n};\n\ntemplate <typename T, typename U>\nclass JoinedShape : public Shape\n{\nprivate:\n    T top;\n    U bottom;\n\npublic:\n    JoinedShape(T top, U bottom) : top(top), bottom(bottom) {};\n\n    std::string draw() {\n        return top.draw() + '\\n' + bottom.draw(); \n    }\n};\n\nShape* makeTrapezoid()\n{\n    Triangle top(2);\n    Square middle(2);\n    FlippedShape<Triangle> bottom(top);\n    JoinedShape<Triangle, JoinedShape<Square, FlippedShape<Triangle>>> trapezoid(top, JoinedShape<Square, FlippedShape<Triangle>>(middle, bottom));\n    return &trapezoid;\n}\n\nint main() {\n    Shape* trapezoid = makeTrapezoid();\n    std::cout << trapezoid->draw();\n    return 0;\n}","index":0,"logprobs":null,"finish_reason":"stop"}],"usage":{"prompt_tokens":443,"completion_tokens":568,"total_tokens":1011}}