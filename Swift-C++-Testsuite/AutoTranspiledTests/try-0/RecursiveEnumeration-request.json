{"model":"text-davinci-003","prompt":"# Convert this from Swift to C++\n# Swift version\n// A recursive enumeration is an enumeration that has another\n// instance of the enumeration as the associated value for\n// one or more of the enumeration cases. You indicate that an\n// enumeration case is recursive by writing indirect before it,\n// which tells the compiler to insert the necessary layer of indirection.\n\nenum ArithmeticExpression {\n    case number(Int)\n    indirect case addition(ArithmeticExpression, ArithmeticExpression)\n    indirect case multiplication(ArithmeticExpression, ArithmeticExpression)\n}\n@main\nstruct MyMain {\n\n    static func main() {\n        let five = ArithmeticExpression.number(5)\n        let four = ArithmeticExpression.number(4)\n        let sum = ArithmeticExpression.addition(five, four)\n        let product = ArithmeticExpression.multiplication(sum, ArithmeticExpression.number(2))\n\n        let result = evaluate(product)\n    }\n}\n\nfunc evaluate(_ expression: ArithmeticExpression) -> Int {\n    switch expression {\n    case let .number(value):\n        return value\n    case let .addition(left, right):\n        return evaluate(left) + evaluate(right)\n    case let .multiplication(left, right):\n        return evaluate(left) * evaluate(right)\n    }\n}\n# End\n # C++ version","max_tokens":2048,"frequency_penalty":0,"presence_penalty":0,"stop":["###"]}